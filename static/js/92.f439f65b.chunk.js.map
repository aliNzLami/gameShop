{"version":3,"file":"static/js/92.f439f65b.chunk.js","mappings":"mHAAO,MAAMA,EAAiBC,GACtBA,EAMEA,EAAMC,SAAS,OAASD,EAAMC,SAAS,SAAWD,EAAMC,SAAS,SAAWD,EAAMC,SAAS,SAM1F,CACHC,QAAQ,GAND,CACHA,QAAQ,EACRC,KAAM,yBARH,CACHD,QAAQ,EACRC,KAAM,iB,wHCwLlB,QA7KA,WAEI,MAAMC,GAAWC,EAAAA,EAAAA,MAGXC,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,IACxB,cAAEC,IAAkBF,EAAAA,EAAAA,YAAWG,EAAAA,IAAmB,CAAC,GA2ClDC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,CAC/CC,OAAQ,CAAEC,KAAM,UAAWC,QAAQ,GACnCC,MAAO,CAAEF,KAAM,QAASC,QAAQ,MAG3BE,EAAMC,IAAWN,EAAAA,EAAAA,UAAS,CAC/BE,KAAM,GACNK,MAAO,GACPC,MAAO,GACPC,SAAU,KAKNC,EAAmBvB,IACvB,MAAMwB,EAAU,IAAIN,GACpBM,EAAQxB,EAAMyB,KAAOzB,EAAM0B,MAC3BP,EAAQ,IAAIK,KAGRG,EAAiBzB,IACrB,MAAM0B,EAAY,IAAIjB,GACtB,IAAI,IAAIkB,KAAQD,EACdA,EAAUC,GAAMb,QAAS,EAE3BY,EAAU1B,GAAQc,QAAS,EAC3BJ,EAAgB,IAAIgB,KAoBhBE,EAAcA,KAjBDC,MACjB,MAAMC,GAAajC,EAAAA,EAAAA,GAAcmB,EAAKE,OACtC,OAAIY,EAAW9B,OAIXgB,EAAKI,WAILJ,EAAKI,SAASW,OAAS,KACzBC,EAAAA,GAAMC,MAAM,8CACL,IALPD,EAAAA,GAAMC,MAAM,wBACL,IALPD,EAAAA,GAAMC,MAAMH,EAAW7B,OAChB,IAcO4B,KAEdtB,EAAcS,GACdgB,EAAAA,GAAME,QAAQ,WACdhC,EAASE,EAAW+B,KAAKC,KACzBC,OAAOC,SAASC,WAIpB,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mGAAkGF,SAAA,EAC/GC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sCAAqCF,SAAA,EAClDF,EAAAA,EAAAA,KAAA,MAAII,UAAU,sBAAsB,cAAY,cAAaF,SACzDjC,EAAaG,OAAOE,OAASL,EAAaG,OAAOC,KAAOJ,EAAaM,MAAMF,QAE/E2B,EAAAA,EAAAA,KAAA,MAAII,UAAU,6CAIdnC,EAAaG,OAAOE,QAElB6B,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CA5GY,CACpB,CACEG,YAAa,aACbC,GAAI,aAEN,CACED,YAAa,YACbC,GAAI,YAEN,CACED,YAAa,QACbC,GAAI,QACJC,KAAM,SAER,CACEF,YAAa,QACbC,GAAI,QACJC,KAAM,UAER,CACEF,YAAa,WACbC,GAAI,WACJC,KAAM,aAwFkBC,IAAIrB,IAEda,EAAAA,EAAAA,KAAA,SACES,SAAWC,GAAK7B,EAAgB,CAACE,IAAKI,EAAKmB,GAAItB,MAAO0B,EAAEC,OAAO3B,QAE/DuB,KAAMpB,EAAKoB,KAAOpB,EAAKoB,KAAO,OAC9BH,UAAU,8BACVC,YAAalB,EAAKkB,YAClBC,GAAInB,EAAKmB,IAJJnB,EAAKmB,MASlBN,EAAAA,EAAAA,KAAA,UAAQY,QAASxB,EAAagB,UAAU,2DAA2D,cAAY,kBAAiBF,SAC5HjC,EAAaG,OAAOC,QAGxB2B,EAAAA,EAAAA,KAAA,KAAGY,QAASA,IAAM3B,EAAc,SAAUmB,UAAU,4CAA4C,cAAY,aAAYF,SACpHjC,EAAaM,MAAMF,WAIzB8B,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,CA3GW,CACnB,CACEG,YAAa,QACbC,GAAI,QACJC,KAAM,SAER,CACEF,YAAa,WACbC,GAAI,WACJC,KAAM,aAqGiBC,IAAIrB,IAEba,EAAAA,EAAAA,KAAA,SACES,SAAWC,GAAK7B,EAAgB,CAACE,IAAKI,EAAKmB,GAAItB,MAAO0B,EAAEC,OAAO3B,QAE/DuB,KAAMpB,EAAKoB,KAAOpB,EAAKoB,KAAO,OAC9BH,UAAU,8BACVC,YAAalB,EAAKkB,YAClBC,GAAInB,EAAKmB,IAJJnB,EAAKmB,MAUlBN,EAAAA,EAAAA,KAAA,UAAQY,QAASxB,EAAagB,UAAU,2DAA2D,cAAY,iBAAgBF,SAC3HjC,EAAaM,MAAMF,QAGvB2B,EAAAA,EAAAA,KAAA,KAAGY,QAASA,IAAM3B,EAAc,UAAWmB,UAAU,4CAA4C,cAAY,aAAYF,SACrHjC,EAAaG,OAAOC,cAOxC,C","sources":["assets/helper/emailValidity.js","pages/Login/Login.jsx"],"sourcesContent":["export const emailValidity = (input) => {\r\n    if(!input) {\r\n        return {\r\n            status: false,\r\n            text: \"Email is empty\"\r\n        };\r\n    }\r\n    if( !(input.includes(\"@\") && (input.includes(\".com\") || input.includes(\".org\") || input.includes(\".net\"))) ) {\r\n        return {\r\n            status: false,\r\n            text: \"Enter a Correct Email\"\r\n        };\r\n    }\r\n    return {\r\n        status: true,\r\n    };;\r\n}","import React, { useState, useContext } from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\n// helper\r\nimport { emailValidity } from '../../assets/helper/emailValidity';\r\n\r\n// context\r\nimport { RouteContext } from '../../assets/context/RouteContext';\r\nimport { ProfileContext } from '../../assets/context/ProfileContext';\r\n\r\n// component\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\n\r\nfunction Login() {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // ------------------------ Context ----------------------- //\r\n    const routesList = useContext(RouteContext);\r\n    const { updateProfile } = useContext(ProfileContext) || {};\r\n    \r\n    \r\n    // ------------------------ Content ----------------------- //\r\n    const singUpContent = [\r\n      {\r\n        placeholder: \"First Name\",\r\n        id: \"firstName\",\r\n      },\r\n      {\r\n        placeholder: \"Last Name\",\r\n        id: \"lastName\",\r\n      },\r\n      {\r\n        placeholder: \"Email\",\r\n        id: \"email\",\r\n        type: \"email\"\r\n      },\r\n      {\r\n        placeholder: \"Phone\",\r\n        id: \"phone\",\r\n        type: \"number\"\r\n      },\r\n      {\r\n        placeholder: \"Password\",\r\n        id: \"password\",\r\n        type: \"password\"\r\n      },\r\n    ]\r\n    const loginContent = [\r\n      {\r\n        placeholder: \"Email\",\r\n        id: \"email\",\r\n        type: \"email\"\r\n      },\r\n      {\r\n        placeholder: \"Password\",\r\n        id: \"password\",\r\n        type: \"password\"\r\n      },\r\n    ]\r\n\r\n    // ------------------------ State ----------------------- //\r\n    const [currentState, setCurrentState] = useState({\r\n      signUp: { name: \"Sign Up\", active: false },\r\n      login: { name: \"Login\", active: true },\r\n    });\r\n\r\n    const [form, setForm] = useState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      password: \"\"\r\n    })\r\n\r\n    // ------------------------ Function ------------------------ //\r\n\r\n    const onChangeHandler = (input) => {\r\n      const newForm = {...form};\r\n      newForm[input.key] = input.value;\r\n      setForm({...newForm});\r\n    }\r\n\r\n    const toggleHandler = (status) => {\r\n      const newStates = {...currentState};\r\n      for(let item in newStates) {\r\n        newStates[item].active = false;\r\n      }\r\n      newStates[status].active = true;\r\n      setCurrentState({...newStates}); \r\n    }\r\n\r\n    const checkValid = () => {\r\n      const validEmail = emailValidity(form.email);\r\n      if(!validEmail.status) {\r\n        toast.error(validEmail.text);\r\n        return false;\r\n      }\r\n      if(!form.password) {\r\n        toast.error(\"Enter Your Password\");\r\n        return false;\r\n      }\r\n      if( form.password.length < 5 ) {\r\n        toast.error(\"Password must have at least 5 characters.\");\r\n        return false;\r\n      }\r\n      return true\r\n    }\r\n\r\n    const signHandler = () => {\r\n      const isValid = checkValid();\r\n      if(isValid) {\r\n        updateProfile(form);\r\n        toast.success(\"Welcome\");\r\n        navigate(routesList.home.url);\r\n        window.location.reload()\r\n      }\r\n    } \r\n\r\n    return (\r\n      <>\r\n        <div className='flex flex-col justify-center items-center w-[90%] sm:max-w-96 m-auto gap-4 text-gray-800 minH500'>\r\n          <div className='inline-flex items-center gap-2 mb-2'>\r\n            <h1 className='prata-font text-3xl' data-testid='loginHeader'>\r\n              { currentState.signUp.active ? currentState.signUp.name : currentState.login.name  }\r\n            </h1>\r\n            <hr className='border-none h-[1.5px] w-8 bg-gray-800' />\r\n          </div>\r\n\r\n          {\r\n            currentState.signUp.active\r\n            ?\r\n              <>  \r\n                {\r\n                  singUpContent.map(item => {\r\n                    return (\r\n                      <input \r\n                        onChange={(e)=> onChangeHandler({key: item.id, value: e.target.value})}\r\n                        key={item.id}\r\n                        type={item.type ? item.type : \"text\"}\r\n                        className='w-full px-3 py-2 mainBorder' \r\n                        placeholder={item.placeholder}\r\n                        id={item.id} \r\n                      />\r\n                    )\r\n                  })\r\n                }\r\n                <button onClick={signHandler} className='mainPurpleBg text-white cursor-pointer px-4 py-2 rounded' data-testid='signUpBtn_color'>\r\n                  { currentState.signUp.name }\r\n                </button>\r\n\r\n                <p onClick={() => toggleHandler(\"login\")} className='text-md text-gray-700 cursor-pointer mt-4' data-testid='changeSign'>\r\n                  { currentState.login.name }\r\n                </p>\r\n              </>\r\n            :\r\n              <>  \r\n\r\n                {\r\n                  loginContent.map(item => {\r\n                    return (\r\n                      <input \r\n                        onChange={(e)=> onChangeHandler({key: item.id, value: e.target.value})}\r\n                        key={item.id}\r\n                        type={item.type ? item.type : \"text\"}\r\n                        className='w-full px-3 py-2 mainBorder' \r\n                        placeholder={item.placeholder}\r\n                        id={item.id} \r\n                      />\r\n                    )\r\n                  })\r\n                }\r\n\r\n                <button onClick={signHandler} className='mainPurpleBg text-white cursor-pointer px-4 py-2 rounded' data-testid='loginBtn_color'>\r\n                  { currentState.login.name }\r\n                </button>\r\n\r\n                <p onClick={() => toggleHandler(\"signUp\")} className='text-md text-gray-700 cursor-pointer mt-4' data-testid='changeSign'>\r\n                  { currentState.signUp.name }\r\n                </p>\r\n              </>\r\n          }\r\n        </div>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default Login"],"names":["emailValidity","input","includes","status","text","navigate","useNavigate","routesList","useContext","RouteContext","updateProfile","ProfileContext","currentState","setCurrentState","useState","signUp","name","active","login","form","setForm","email","phone","password","onChangeHandler","newForm","key","value","toggleHandler","newStates","item","signHandler","checkValid","validEmail","length","toast","error","success","home","url","window","location","reload","_jsx","_Fragment","children","_jsxs","className","placeholder","id","type","map","onChange","e","target","onClick"],"sourceRoot":""}